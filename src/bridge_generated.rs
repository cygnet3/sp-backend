#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::constants::LogEntry;
use crate::constants::ScanProgress;
use crate::constants::WalletStatus;

// Section: wire functions

fn wire_create_log_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(create_log_stream(
                    task_callback.stream_sink::<_, LogEntry>(),
                ))
            }
        },
    )
}
fn wire_create_amount_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "create_amount_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(create_amount_stream(task_callback.stream_sink::<_, u32>()))
            }
        },
    )
}
fn wire_create_scan_progress_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "create_scan_progress_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(create_scan_progress_stream(
                    task_callback.stream_sink::<_, ScanProgress>(),
                ))
            }
        },
    )
}
fn wire_setup_impl(
    port_: MessagePort,
    files_dir: impl Wire2Api<String> + UnwindSafe,
    scan_sk: impl Wire2Api<String> + UnwindSafe,
    spend_pk: impl Wire2Api<String> + UnwindSafe,
    birthday: impl Wire2Api<u32> + UnwindSafe,
    is_testnet: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "setup",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_files_dir = files_dir.wire2api();
            let api_scan_sk = scan_sk.wire2api();
            let api_spend_pk = spend_pk.wire2api();
            let api_birthday = birthday.wire2api();
            let api_is_testnet = is_testnet.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(setup(
                    api_files_dir,
                    api_scan_sk,
                    api_spend_pk,
                    api_birthday,
                    api_is_testnet,
                ))
            }
        },
    )
}
fn wire_reset_wallet_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "reset_wallet",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(reset_wallet()),
    )
}
fn wire_start_nakamoto_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "start_nakamoto",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(start_nakamoto()),
    )
}
fn wire_restart_nakamoto_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "restart_nakamoto",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(restart_nakamoto()),
    )
}
fn wire_get_peer_count_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "get_peer_count",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_peer_count()),
    )
}
fn wire_scan_next_n_blocks_impl(port_: MessagePort, n: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "scan_next_n_blocks",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_n = n.wire2api();
            move |task_callback| Result::<_, ()>::Ok(scan_next_n_blocks(api_n))
        },
    )
}
fn wire_scan_to_tip_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "scan_to_tip",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(scan_to_tip()),
    )
}
fn wire_get_wallet_info_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, WalletStatus, _>(
        WrapInfo {
            debug_name: "get_wallet_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_wallet_info()),
    )
}
fn wire_get_birthday_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "get_birthday",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_birthday()),
    )
}
fn wire_get_wallet_balance_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "get_wallet_balance",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_wallet_balance()),
    )
}
fn wire_get_receiving_address_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "get_receiving_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_receiving_address()),
    )
}
fn wire_get_keys_from_seed_impl(
    port_: MessagePort,
    seedphrase: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (String, String), _>(
        WrapInfo {
            debug_name: "get_keys_from_seed",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seedphrase = seedphrase.wire2api();
            move |task_callback| Result::<_, ()>::Ok(get_keys_from_seed(api_seedphrase))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for LogEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![self.msg.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LogEntry {}
impl rust2dart::IntoIntoDart<LogEntry> for LogEntry {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ScanProgress {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.start.into_into_dart().into_dart(),
            self.current.into_into_dart().into_dart(),
            self.end.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ScanProgress {}
impl rust2dart::IntoIntoDart<ScanProgress> for ScanProgress {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for WalletStatus {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.amount.into_into_dart().into_dart(),
            self.scan_height.into_into_dart().into_dart(),
            self.block_tip.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for WalletStatus {}
impl rust2dart::IntoIntoDart<WalletStatus> for WalletStatus {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
